{"version":3,"file":"bundle.js","mappings":"mBAAAA,QAAQC,IAAI,e","sources":["webpack://my-webpack-project/./src/index.js"],"sourcesContent":["console.log(\"Hello World!\");\n\n\nimport \"./styles.css\";\n\nconst API_KEY=\"1462d2150e4d487fa0717808225f18c5\";\n\nconst requestOptions = {\n  method: \"GET\",\n  redirect: \"follow\",\n  mode: \"cors\"\n};\n\n\nfunction fetchWeatherData() {\n\n\n}\n\nfunction fetchOPGeoData() {\n  let results;\n  let geocoded;\n  \n\n  fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=${API_KEY}`, requestOptions)\n    .then((response) => response.json())\n    .then((json) => { results = json; console.log(\"results\", results); })\n    .then(() => geocoded = extractValues(results))\n    .then( () => localStorage.setItem(\"GeoCoded\", JSON.stringify(geocoded)))\n    .catch((error) => console.error(error));\n}\n\n\n\nfunction fetchIPGeocode(){\n  let result = JSON.parse(localStorage.getItem(\"GeoCoded\"));\n  let myKeys = [\"ip\", \"city\", \"state\", \"country\", \"lat\", \"lon\", \"time_zone\"];\n\n  for( const key in result ) {\n    if( myKeys.includes(key) ) {\n      ext1.querySelector(`.${key}`).innerHTML = `${key}`.toUpperCase() + \" :  \" + `${result[key]}`;\n    }\n    console.log(`${key}: ${result[key]}`,);\n  }\n\n  console.log(\"myResults\", result);\n}\n\n\nfunction fetchCurrentWeather(){\n\n  let baseURL = \"https://api.open-meteo.com/v1/forecast\";\n  let current = \"current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weather_code,cloud_cover,pressure_msl,surface_pressure,wind_speed_10m,wind_direction_10m,wind_gusts_10m\";\n  let daily = \"daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,uv_index_max,precipitation_probability_max\";\n  let units = \"temperature_unit=fahrenheit&wind_speed_unit=mph&precipitation_unit=inch\";\n  let forecast = \"forecast_days=3\";\n\n  let timezone;\n  let city;\n  let state;\n  let latitude;\n  let longitude;\n  let weather;\n\n  if (localStorage.getItem(\"GeoCoded\")){\n    city = JSON.parse(localStorage.getItem(\"GeoCoded\")).city;\n    state = JSON.parse(localStorage.getItem(\"GeoCoded\")).state;\n    lat = JSON.parse(localStorage.getItem(\"GeoCoded\")).lat;\n    lon = JSON.parse(localStorage.getItem(\"GeoCoded\")).lon;\n    tz = encodeURIComponent(JSON.parse(localStorage.getItem(\"GeoCoded\")).timezone_name);\n  }\n\n  latitude = `latitude=${lat}`;\n  longitude = `longitude=${lon}`;\n  timezone = `timezone=${tz}`;\n  city = `city=${city}`;\n  \n  fetch(`${baseURL}?${latitude}&${longitude}&${current}&${daily}&${units}&${timezone}&${forecast}`, requestOptions)\n    .then( (response) => response.json() )\n    .then( (json) => { console.log(\"weather\", json); weather = json; })\n    .then( () => localStorage.setItem(\"weatherData\", JSON.stringify(weather)))\n    .catch( (error) => console.log(\"Request failed\", error));\n}\n\n\n\nfunction convertWindDirection( angle ){\n\t\n\tlet directions = [\n    \"N\", \"NNE\", \"NE\", \"ENE\",\n    \"E\", \"ESE\", \"SE\", \"SSE\",\n    \"S\", \"SSW\", \"SW\", \"WSW\",\n    \"W\", \"WNW\", \"NW\", \"NNW\" ];\n\t// We divide it into 16 sections\n  // This means, every 360 / 16 degree, there's a section change\n\t// So, in our case, every 22.5 degree, there's a section change\n\t// In order to get the correct section, we just need to divide\n\tlet section = parseInt( angle/22.5 + 0.5 );\n\t// If our result comes to be x.6, which should normally be rounded off to\n\t// int(x) + 1, but parseInt doesn't care about it\n\t// Hence, we are adding 0.5 to it\n\n\t// Now we know the section, just need to make sure it's under 16\n\tsection = section % 16;\n\n\t// Now we can return it\n\treturn directions[ section ];\n}"],"names":["console","log"],"sourceRoot":""}